#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=16
#SBATCH --time=24:00:00
#SBATCH --partition=blanca-curc-gpu
#SBATCH --gres=gpu:1
#SBATCH --output=test_res_till66_epoch-%j.out


# calculate eval metrics and generate final typing result given typing vocab rankings generated by eval.py

module purge


module load anaconda
module load cuda/12.1.1
#cd /scratch/alpine/asum8093/LiteOntonotesTraining/LiteOntonotesTraining/data/
cd /scratch/alpine/asum8093/LiteOntonotesTraining/LiteOntonotesTraining/

conda activate py38-pt1131-cuda117

echo "== This is the scripting step! =="
# dev="output/12_03_11_Mar_31_2025_batch32_margin0.1_lr1e-06lambda0.05/epochs17/Evaluation_g_dev_processed.json"
# test="output/12_03_11_Mar_31_2025_batch32_margin0.1_lr1e-06lambda0.05/epochs17/Evaluation_g_test_processed.json"
# model_dir="output/12_03_11_Mar_31_2025_batch32_margin0.1_lr1e-06lambda0.05/epochs17"


# CUDA_VISIBLE_DEVICES=$device python3 result.py \
#                              --dev $dev \
#                              --test $test \
#                              --model_dir $model_dir \
#                              --threshold_step 0.05

#!/bin/bash

# Define the base directory where your epoch checkpoints are stored.
base_dir="output/15_47_34_May_26_2025_batch32_margin0.1_lr1e-06lambda0.05"

# Optionally, set your CUDA device. If not set externally, default to device 0.
device=${CUDA_VISIBLE_DEVICES:-0}

# Loop through each directory that starts with "epochs" inside the base directory.
# for epoch_path in "$base_dir"/epochs*; do
for epoch_path in $(ls -d "$base_dir"/epochs* 2>/dev/null | sort -V); do
    # Check to ensure that the item is a directory.
    if [ -d "$epoch_path" ]; then
        echo "Processing checkpoint: $epoch_path"

        # Build the paths to the evaluation files inside the current epoch directory.
        dev="${epoch_path}/Evaluation_dev_processed.json"
        test="${epoch_path}/Evaluation_test_processed.json"
        model_dir="$epoch_path"

        # Check if both evaluation JSON files exist. If either file is missing, skip this checkpoint.
        if [ -f "$dev" ] && [ -f "$test" ]; then
            # Run the Python evaluation script using the constructed paths.
            CUDA_VISIBLE_DEVICES=$device python3 result.py \
                --dev "$dev" \
                --test "$test" \
                --model_dir "$model_dir" \
                --threshold_step 0.05
        else
            echo "Warning: Evaluation files not found in $epoch_path. Skipping this checkpoint."
        fi
    fi
done